<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F12%2F24%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[字典]]></title>
    <url>%2F2019%2F10%2F16%2F%E5%AD%97%E5%85%B8%2F</url>
    <content type="text"><![CDATA[字典（dict） 字典是一种组合数据，没有顺序的组合数据，数据已以键值对形式出现 123456789101112131415161718192021# 字典的创建# 创建空字典d = &#123;&#125;print(d)d = dict()print(d)# 创建有值的字典，每一组数据用冒号（：）隔开，每一对键值对用逗号（，）隔开d = &#123;"one": 1, "two": 2, "three": 3&#125;print(d)d = dict(&#123;"one": 1, "two": 2, "three": 3&#125;)print(d)# 用关键字参数d = dict(ont=1, two=2, three=3)print(d)d = dict([("one", 1), ("two", 2), ("three", 3)])print(d) {} {} {&apos;one&apos;: 1, &apos;two&apos;: 2, &apos;three&apos;: 3} {&apos;one&apos;: 1, &apos;two&apos;: 2, &apos;three&apos;: 3} {&apos;ont&apos;: 1, &apos;two&apos;: 2, &apos;three&apos;: 3} {&apos;one&apos;: 1, &apos;two&apos;: 2, &apos;three&apos;: 3}字典的特征 字典是数据类型，但是是无序序列，所以没有分片和索引 字典中的数据每个都是由键值对组成 key：必须是可哈希的值，比如int，string，float，tuple，但是list，set，dict不行 value：任何值 字典操作12345678910# 访问数据d = &#123;"one": 1, "two": 2, "three": 3&#125;print(d["one"])d["one"] = "eins"print(d)# 删除操作使用deldel d["one"]print(d) 1 {&apos;one&apos;: &apos;eins&apos;, &apos;two&apos;: 2, &apos;three&apos;: 3} {&apos;two&apos;: 2, &apos;three&apos;: 3}12345678910# 成员检测，in， not in# 成员检测的是key内容d = &#123;"one": 1, "two": 2, "three": 3&#125;if 2 in d: print("value")if "two" in d: print("key")if ("two", 2) in d: print("kv") key12345678910111213# 遍历在python2和python3中区别比较大，代码不通用d = &#123;"one": 1, "two": 2, "three": 3&#125;for k in d: print(k, d[k]) for k in d.keys(): print(k, d[k]) for v in d.values(): print(v) for k, v in d.items(): print(k, "--", v) one 1 two 2 three 3 one 1 two 2 three 3 1 2 3 one -- 1 two -- 2 three -- 3字典生成式1234567d = &#123;"one": 1, "two": 2, "three": 3&#125;dd = &#123;k:v for k, v in d.items()&#125;print(dd)dd = &#123;k:v for k, v in d.items() if v % 2 == 0&#125;print(dd) {&apos;one&apos;: 1, &apos;two&apos;: 2, &apos;three&apos;: 3} {&apos;two&apos;: 2}1## 字典方法 1234# 通用函数：len(), max(), min(), dict()# str(dict)：返回字典的字符串格式d = &#123;"one": 1, "two": 2, "three": 3&#125;print(str(d)) {&apos;one&apos;: 1, &apos;two&apos;: 2, &apos;three&apos;: 3}1234567# clear()：清空字典# items()：返回字典的键值对组成的元组格式d = &#123;"one": 1, "two": 2, "three": 3&#125;i = d.items()print(type(i))print(i) &lt;class &apos;dict_items&apos;&gt; dict_items([(&apos;one&apos;, 1), (&apos;two&apos;, 2), (&apos;three&apos;, 3)])1234# keys()：返回字典的键组成的一个结构k = d.keys()print(type(k))print(k) &lt;class &apos;dict_keys&apos;&gt; dict_keys([&apos;one&apos;, &apos;two&apos;, &apos;three&apos;])1234# values()：返回字典的值组成的一个可迭代的结构v = d.values()print(type(v))print(v) &lt;class &apos;dict_values&apos;&gt; dict_values([1, 2, 3])123456789# get()：根据指定键返回相应的值，可以设置默认值d = &#123;"one": 1, "two": 2, "three": 3&#125;print(d.get("o"))# get()默认值是None，可以设置print(d.get("one", 200))print(d.get("o", 100))print(d['o']) None 1 100 --------------------------------------------------------------------------- KeyError Traceback (most recent call last) &lt;ipython-input-9-48f587f7a2b1&gt; in &lt;module&gt;() 7 print(d.get(&quot;o&quot;, 100)) 8 ----&gt; 9 print(d[&apos;o&apos;]) KeyError: &apos;o&apos;12345# fromkeys()：使用指定的序列作为键，使用一个值作为字典的所有键的值l = ['eins', 'zwei', 'drei']d = dict.fromkeys(l, "ha")print(d) {&apos;eins&apos;: &apos;ha&apos;, &apos;zwei&apos;: &apos;ha&apos;, &apos;drei&apos;: &apos;ha&apos;}]]></content>
  </entry>
  <entry>
    <title><![CDATA[集合]]></title>
    <url>%2F2019%2F10%2F15%2F%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[集合（set） 一推确定的无序的唯一的数据，集合中每一个数据称为一个元素 12345678# 集合的定义s = set()print(type(s))print(s)# 大括号内一定要有值，否则定义出的是一个dicts = &#123;1, 2, 3, 4, 5, 6, 7&#125;print(s) &lt;class &apos;set&apos;&gt; set() {1, 2, 3, 4, 5, 6, 7}1234# 如果只是用大括号定义，则定义的是一个dict类型d = &#123;&#125;print(type(d))print(d) &lt;class &apos;dict&apos;&gt; {}集合的特征 集合内数据无序，即无法使用索引和分片 集合内数据元素具有唯一性，可以用来排除重复数据 集合内的数据，str， int， float， tuple…即内部只能放置可哈希数据 集合序列12345678910# 成员检查# in， not ins = &#123;4, 5, "i", "love", 'a'&#125;print(s)if 'love' in s: print("love") if 's' not in s: print("s") {4, 5, &apos;a&apos;, &apos;love&apos;, &apos;i&apos;} love s集合遍历12345# for循环s = &#123;1, 2, 3, 4, 5, 6, 7&#125;for i in s: print(i, end=" ") 1 2 3 4 5 6 7 12345678# 带有元组的集合遍历s = &#123;(1, 2, 3), (4, 5, 6), (7, 8, 9)&#125;for k, m, n in s: print(k, "--", m, '--', n) for k in s: print(k) 4 -- 5 -- 6 7 -- 8 -- 9 1 -- 2 -- 3 (4, 5, 6) (7, 8, 9) (1, 2, 3)1234567# 普通集合内涵# 以下集合在初始化后自动过滤掉重复元素s = &#123;23, 1, 2, 3, 2, 3, 1, 2, 3, 6, 7, 2&#125;print(s)ss = &#123;i for i in s&#125;print(ss) {1, 2, 3, 6, 7, 23} {1, 2, 3, 6, 7, 23}12sss = &#123;i for i in s if i % 2 == 0&#125;print(sss) {2, 6}集合函数12345# len(), max(), min()s = &#123;1, 2, 3, 4, 5&#125;print(len(s))print(max(s))print(min(s)) 5 5 11234# set()生成一个集合l = [1, 2, 3, 4, 5, 4, 3, 2, 1]s = set(l)print(s) {1, 2, 3, 4, 5}1234# add()向集合内添加元素s = &#123;1&#125;s.add(2)print(s) {1, 2}123456# clear()清空数据s = &#123;1, 2, 3, 4, 5&#125;print(id(s))s.clear()print(s)print(id(s)) 78793640 set() 78793640123456789101112131415# copy()拷贝# remove()移除指定的值，直接改变原有值，如果要删除的值不存在，error# discard()移除集合中的指定值，跟remove一样，但是如果要删除的话，不报错s = &#123;1, 2, 3, 4, 5&#125;s.remove(4)print(s)s.discard(1)print(s)print('-' * 30)s.discard(100)print(s)s.remove(100)print(s) {1, 2, 3, 5} {2, 3, 5} ------------------------------ {2, 3, 5} --------------------------------------------------------------------------- KeyError Traceback (most recent call last) &lt;ipython-input-13-a0a8dc78a212&gt; in &lt;module&gt;() 12 print(s) 13 ---&gt; 14 s.remove(100) 15 print(s) KeyError: 10012345# pop()随机移除一个元素s = &#123;1, 2, 3, 4, 5&#125;d = s.pop()print(d)print(s) 1 {2, 3, 4, 5}1234567891011121314151617# 集合函数# intersection()交集# difference()差集# union()并集# issubset()检查一个集合是否是另一个集合的子集# issuperset()检查一个集合是否是另一个集合的超集s1 = &#123;1, 2, 3, 4, 5, 6, 7&#125;s2 = &#123;1, 2, 3, 8, 9&#125;s_1 = s1.intersection(s2)print(s_1)s_2 = s1.difference(s2)print(s_2)s_3 = s1.issubset(s2)print(s_3) {1, 2, 3} {4, 5, 6, 7} False123456789# 集合的数学操作s1 = &#123;1, 2, 3, 4, 5, 6&#125;s2 = &#123;5, 6, 7, 8, 9&#125;s_1 = s1 - s2print(s_1)s_2 = s1 + s2print(s_2) {1, 2, 3, 4} --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-23-3c9fa500e5d3&gt; in &lt;module&gt;() 6 print(s_1) 7 ----&gt; 8 s_2 = s1 + s2 9 print(s_2) TypeError: unsupported operand type(s) for +: &apos;set&apos; and &apos;set&apos;frozen set：冰冻集合 冰冻集合就是不可以进行任何修改的集合 frozenset是一种特殊集合 123s = frozenset()print(type(s))print(s) &lt;class &apos;frozenset&apos;&gt; frozenset()12]]></content>
  </entry>
  <entry>
    <title><![CDATA[元组]]></title>
    <url>%2F2019%2F10%2F14%2F%E5%85%83%E7%BB%84%2F</url>
    <content type="text"><![CDATA[元组（tuple） 元组可以看成是一个不可更改的列表 123456789101112131415161718192021222324252627# 创建空元组t = ()print(type(t))# 创建一个只有一个值的元组t = (1, )print(type(t))print(t)t = 1, print(type(t))print(t)# 创建多个值的元组t = (1, 2, 3, 4, 5)print(type(t))print(t)t = 1, 2, 3, 4, 5print(type(t))print(t)# 使用其它结构创建l = [1, 2, 3, 4, 5]t = tuple(l)print(type(t))print(t) &lt;class &apos;tuple&apos;&gt; &lt;class &apos;tuple&apos;&gt; (1,) &lt;class &apos;tuple&apos;&gt; (1,) &lt;class &apos;tuple&apos;&gt; (1, 2, 3, 4, 5) &lt;class &apos;tuple&apos;&gt; (1, 2, 3, 4, 5) &lt;class &apos;tuple&apos;&gt; (1, 2, 3, 4, 5)元组的特性 有序列表 元组数据值可以访问，不能更改 元组数据可以是任意类型 list所有特性，除了可修改外元组都具有 123# 索引操作t = (1, 2, 3, 4, 5)print(t[2]) 312# 超标错误# print(t[100]) 123456789t = (1, 2, 3, 4, 5)t1 = t[1::2]print(id(t))print(id(t1))print(t1)# 切片可以超标t2 = t[2:100]print(t2) 81876248 69088456 (2, 4) (3, 4, 5)1234567891011# 序列相加t1 = (1, 2, 3)t2 = (4, 5, 6)print(t1)print(id(t1))t1 = t1 + t2print(t1)print(id(t1))# tuple的不可修改是指内容的不可修改，修改tuple内容会导致报错# t1[1] = 10 (1, 2, 3) 81888168 (1, 2, 3, 4, 5, 6) 553317201234# 元组相乘t = (1, 2, 3)t = t * 3print(t) (1, 2, 3, 1, 2, 3, 1, 2, 3)123456# 成员检测t = (1, 2, 3)if 2 in t: print("yes")else: print("no") yes12345# 元组遍历，一般采用for# 单层元组遍历t = (1, 2, 3, 'hututu', 'zhangxiaoli', 'huyingjun')for i in t: print(i) 1 2 3 hututu zhangxiaoli huyingjun12345# 双层元组的遍历t = ((1, 2, 3), (2, 3, 4), ('hahaha', 'heiheihei', 'hehehe'))for k, m, n in t: print(k, '--', m, '--', n) 1 -- 2 -- 3 2 -- 3 -- 4 hahaha -- heiheihei -- hehehe元组的操作123# len()获取元组的长度t = (1, 2, 3, 4, 5)print(len(t)) 51234# max()最大值# min()最小值print(max(t))print(min(t)) 5 11234567# tuple()转换或创建元组l = [1, 2, 3, 4, 5]t = tuple(l)print(t)t = tuple()print(t) (1, 2, 3, 4, 5) ()12345678910# count()计算指定数据出现的次数t = (2, 1, 2, 3, 4, 5, 23, 34, 1, 2)print(t.count(2))# index()找出指定元素在元组中的索引位置print(t.index(3))# 如歌需要查找的数字是多个，则返回第一个print(t.index(1)) 3 3 1变量交换1234567891011121314151617181920212223242526# 两个变量交换值a = 1b = 2print(a)print(b)print('-' * 30)# c like 写法a = 1b = 2c = aa = bb = cprint(a)print(b)print('-' * 30)# python写法a = 1b = 2a, b = b, aprint(a)print(b) 1 2 ------------------------------ 2 1 ------------------------------ 2 1]]></content>
  </entry>
  <entry>
    <title><![CDATA[列表]]></title>
    <url>%2F2019%2F10%2F13%2F%E5%88%97%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[数据结构-列表（list） 一组有顺序的的数据组合 12345678910111213141516171819# 1.创建空列表l1 = []print(type(l1))print(l1)# 2.创建带值的列表l2 = [100]print(type(l2))print(l2)# 3.创建列表，带多个值l3 = [1, 2, 3, 4, 5]print(type(l3))print(l3)# 使用list()l = list()print(type(l))print(l) &lt;class &apos;list&apos;&gt; [] &lt;class &apos;list&apos;&gt; [100] &lt;class &apos;list&apos;&gt; [1, 2, 3, 4, 5] &lt;class &apos;list&apos;&gt; []列表常用操作 访问 使用下标操作（索引） 列表的位置是从0开始 分片操作 对列表进行任意一段的截取 [开始:结尾:步进] 1234# 下访问列表l = [1, 2, 3, 4, 5]print(l[2]) 312345678# 分片操作# 注意截取的范围，包含左边的下标值，不包含右边的下标值print(l[1:2])# 下标值可以为空print(l[:])print(l[:4])print(l[2:]) [2] [1, 2, 3, 4, 5] [1, 2, 3, 4] [3, 4, 5]1234567891011# 分片可以控制增长幅度，默认增长幅度为1print(l[1:5:1])# 打印从下标1开始的数字，每次隔一个print(l[1:5:2])# 下标可以超出范围，超出后不在考虑多余下标内容print(l[1:10])# 下标值，增长幅度可以为负数（表明顺序是从右往左）print(l[::-1]) 分片操作是生成一个新的list 内置函数id，负责显示一个变量或者数据的唯一编号 12345678# id函数示例a = 100b = 200print(id(a))print(id(b))c = aprint(id(c)) 8791272586080 8791272589280 879127258608012345678910# 通过id可以直接判断出分片是重新生成了一份数据还是使用同一份数据l = [1, 2, 3, 4, 5, 6, 7]ll = l[:]lll = llprint(id(l))print(id(ll))print(id(lll))# 是同一份数据 77299784 65287240 65287240 del：删除命令 1234# del删除a = [1, 2, 3, 4, 5]del a[3]print(a) [1, 2, 3, 5]123456# 使用del之后，不会生成新的lista = [1, 2, 3, 4, 5]print(id(a))del a[3]print(id(a))print(a) 63638600 63638600 [1, 2, 3, 5]123# del一个变量后不能再继续使用此变量del a#print(a) 使用加号（+）连接两个列表 1234a = [1, 2, 3, 4, 5]b = [6, 7, 8, 9, 10]c = a + bprint(c) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 使用乘号复制多个列表 123a = [1, 2, 3, 4, 5]b = a * 5print(b) [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5] 成员资格判断，判断一个元素是否在list里面 123456789a = [1, 2, 3, 4, 5]b = 7# 判断结果是一个布尔值c = b in aprint(c)d = 3print(d in a) False True12345# not ina = [1, 2, 3, 4, 5]b = 10print(b not in a) True列表的遍历 for while 12345# for in lista = [1, 2, 3, 4, 5]for i in a: print(i) 1 2 3 4 51234# java， c++ 程序员写的python代码是这样的for i in range(0,len(a)): print(a[i]) i += 1 1234for i in range(1, 10): print(i) print(type(range(1, 10))) 1 2 3 4 5 6 7 8 9 &lt;class &apos;range&apos;&gt;12345678910# while循环遍历list# 一般不用while遍历lista = [1, 2, 3, 4, 5]length = len(a)# index表示的是list的下标index = 0while index &lt; length: print(a[index]) index += 1 1 2 3 4 512345# 嵌套列表循环遍历a = [['one', 1], ['two', 2], ['three', 3]]for k,v in a: print(k, '--', v) one -- 1 two -- 2 three -- 312345# ValueError# a = [["one", 1, "eins"], ["two", 2], ["three", 3,4,5,6,8] ]# for k,v in a:# print(k, "--", v) 1234a = [["one", 1, "eins"], ["two", 2,"zwei"], ["three", 3,"drei"] ]# k，v,w的个数应该跟解包出来的变量个数一致for k,v,w in a: print(k, "--", v, "--",w) one -- 1 -- eins two -- 2 -- zwei three -- 3 -- drei123456789101112131415161718192021222324# 传值和传地址的区别# 对于简单的数值，采用传值操作，即在函数内对参数的操作不影响外面的变量# 对于复杂变量，采用传地址操作，此时函数内的参数和外部变量是同一份内容，任何地方对此内容的更改都会影响另外的变量或参数的使用def a(n): n[2] = 300 print(n) return Nonedef b(n): n += 100 print(n) return Nonea1 = [1, 2, 3, 4, 5]b1 = 9print(a1)a(a1)print(a1)print(b1)b(b1)print(b1) [1, 2, 3, 4, 5] [1, 2, 300, 4, 5] [1, 2, 300, 4, 5] 9 109 9创建新列表1234567# for创建a = [1, 2, 3, 4, 5]# 用list a创建一个list b# 把a中的元素逐个放入新列表中b = [i for i in a]print(b) [1, 2, 3, 4, 5]12345# 对a中的所有元素乘以10，生成一个新lista = [1, 2, 3, 4, 5]# 用list a创建一个list bb = [i*10 for i in a]print(b) [10, 20, 30, 40, 50]1234567# 还可以过滤原来list中的内容放入新的列表中# 比如原有list a，需要把a中的偶数生成新的列表ba = [x for x in range(1, 37)]print(a)b = [m for m in a if m % 2 == 0]print(b) [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36] [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]12345678910111213141516171819202122# 列表生成式可以嵌套a = [i for i in range(1,4)] # 生成list aprint(a)b = [i for i in range(100,400) if i % 100 == 0]print(b)# 列表生成是可以嵌套,此时等于两个for循环嵌套c = [m+n for m in a for n in b]print(c)# 上面代码跟下面代码等价c = []for m in a: for n in b: c += [m+n]print(c)# 嵌套的列表生成式也可以用条件表达式c = [m+n for m in a for n in b if m+n &lt; 250]print(c) [1, 2, 3] [100, 200, 300] [101, 201, 301, 102, 202, 302, 103, 203, 303] [101, 201, 301, 102, 202, 302, 103, 203, 303] [101, 201, 102, 202, 103, 203]列表的常用函数123# len()列表长度a = [x for x in range(1, 100)]print(len(a)) 9912345# max()列表中的最大值# min()列表中的最小值print(max(a))print(min(a)) 99 1123# list()将其它格式转换成lista = "12345"print(list(a)) [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;]12# 把range产生的内容转换成listprint(list(range(1, 10))) [1, 2, 3, 4, 5, 6, 7, 8, 9]12345# append()在末尾插入一个内容a = [i for i in range(1, 10)]print(a)a.append(100)print(a) [1, 2, 3, 4, 5, 6, 7, 8, 9] [1, 2, 3, 4, 5, 6, 7, 8, 9, 100]1234# insert(index, data)在index位置前插入data值print(a)a.insert(3, 50)print(a) [1, 2, 3, 4, 5, 6, 7, 8, 9, 100] [1, 2, 3, 50, 4, 5, 6, 7, 8, 9, 100]123456789# 删除# del 删除# pop(index)删除一个元素,index为位置索引，为空则删除最后一个索引print(a)a1 = a.pop()a2 = a.pop(3)print(a1)print(a2)print(a) [1, 2, 3, 50, 4, 5, 6, 7, 8, 9, 100] 100 50 [1, 2, 3, 4, 5, 6, 7, 8, 9]12345678910# remove(data）在列表中删除指定的值的元素,如果被删除的值没在list中，则报错a.insert(3, 30)print(a)print(id(a))a.remove(30)print(a)print(id(a))# 输出两个id值一样，说明，remove操作是在原list直接操作 [1, 2, 3, 30, 4, 5, 6, 7, 8, 9] 79547848 [1, 2, 3, 4, 5, 6, 7, 8, 9] 79547848123456# clear()清空print(a)print(id(a))a.clear()print(a)print(id(a)) [] 79547848 [] 79547848 79547592123456789# reverse()翻转列表内容a = [1, 2, 3, 4, 5]print(a)print(id(a))a.reverse()print(a)print(id(a)) [1, 2, 3, 4, 5] 78792648 [5, 4, 3, 2, 1] 78792648123456789101112# extend(list)扩展列表a = [1, 2, 3]b = [4, 5, 6]print(a)print(id(a))a.extend(b)print(a)print(id(a)) [1, 2, 3] 79544904 [1, 2, 3, 4, 5, 6] 79544904 [1, 2, 3] 78735048 [1, 2, 3, 4, 5, 6] 787350481234567# count()查找列表中指定值或元素的个数print(a)a.append(3)a.insert(5, 3)print(a)a_len = a.count(3)print(a_len) [1, 2, 3, 4, 5, 6] [1, 2, 3, 4, 5, 3, 6, 3] 3123456789101112131415161718192021222324# copy()拷贝，此函数是浅拷贝a = [1, 2, 3, 4, 5, 6, 7]print(a)b = ab[3] = 0print(a)print(id(a))print(b)print(id(b))print('-' * 30)# 需要使用copy()函数b = a.copy()print(a)print(id(a))print(b)print(id(b))b[3] = 9print(a)print(b) [1, 2, 3, 4, 5, 6, 7] [1, 2, 3, 0, 5, 6, 7] 79470152 [1, 2, 3, 0, 5, 6, 7] 79470152 ------------------------------ [1, 2, 3, 0, 5, 6, 7] 79470152 [1, 2, 3, 0, 5, 6, 7] 79547592 [1, 2, 3, 0, 5, 6, 7] [1, 2, 3, 9, 5, 6, 7]]]></content>
  </entry>
  <entry>
    <title><![CDATA[汉诺塔问题]]></title>
    <url>%2F2019%2F10%2F13%2F%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[汉诺塔问题 规则： 1.每次移动一个盘子 2.任何时候大盘子在下面，小盘子在上面 方法： 1.n=1：直接把A上的一个盘子移动到C上，A-＞C 2.n=2：⑴把小盘子从A放到B上，A-＞B ⑵把大盘子从A放到C上，A-＞C ⑶把小盘子从B放到C上，B-＞C 3.n=3：⑴把A上的两个盘子，通过C移动到B上去，调用递归实现 ⑵把A剩下的一个最大的盘子移动到C上，A-＞C ⑶把B上的两个盘子，借助A，挪到C上去，调用递归 4.n=n：⑴把A上的n-1个盘子，借助C移动到B上，调用递归 ⑵把A上最大盘子，也是唯一一个，移动到C上，A-＞C ⑶把B上n-1节盘子，借助A，移动到C上，调用递归 1234567891011121314151617181920def hano(n, a='A', b='B', c='C'): ''' 汉诺塔的递归实现 n：几个盘子 a：第一个塔，开始的塔 b：第二个塔，中间过渡的塔 c：第三个塔，目标塔 ''' if n == 1: print(a, '--&gt;', c) return None # 把A上的n-1个盘子，借助C移动到B上去 hano(n-1, a, c, b) print(a, '--&gt;', c) # 把B上n-1节盘子，借助A，移动到C上 hano(n-1, b, a, c) hano(1) A --&gt; C1hano(2) A --&gt; B A --&gt; C B --&gt; C1hano(5) A --&gt; C A --&gt; B C --&gt; B A --&gt; C B --&gt; A B --&gt; C A --&gt; C A --&gt; B C --&gt; B C --&gt; A B --&gt; A C --&gt; B A --&gt; C A --&gt; B C --&gt; B A --&gt; C B --&gt; A B --&gt; C A --&gt; C B --&gt; A C --&gt; B C --&gt; A B --&gt; A B --&gt; C A --&gt; C A --&gt; B C --&gt; B A --&gt; C B --&gt; A B --&gt; C A --&gt; C]]></content>
  </entry>
  <entry>
    <title><![CDATA[函数]]></title>
    <url>%2F2019%2F10%2F12%2F%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[函数 代码的一种组织形式 一个函数一般完成一项特定的功能 函数使用 函数需要先定义 使用函数，称调用 12345678910# 定义一个函数# 只是定义的话不会执行# 1. def关键字，后跟一个空格# 2. 函数名，自己定义，起名需要遵循命名规则# 3. 后面括号和冒号不能省略，括号内可以有参数# 4. 函数内所有代码缩进def func(): print("我是一个函数")print("嘿嘿嘿嘿嘿") 嘿嘿嘿嘿嘿123# 函数的调用# 直接函数名后跟括号func() 我是一个函数函数的参数和返回值 参数：负责给函数传递一些必要的数据或者信息 形参（形式参数）：在函数定义的时候用到的参数没有具体值，只是一个占位的符号，称为形参 实参（实际参数）：在调用函数的时候输入的值 返回值：函数的执行结果 使用return关键字 如果没有return，默认返回一个None 函数执行return语句，则无条件返回，即结束函数的执行 123456789101112# 函数的定义和使用# 参数person只是一个符号，代表的是调用的时候的某一个数据# 调用的时候，会用p的值代替函数中所有的persondef hello(person): print("&#123;&#125;,你好".format(person)) print("hello") p = "world"hello(p) world,你好 hello1234567891011# return语句的基本使用# 函数返回一句话def hello(person): print("&#123;&#125;, 你好".format(person)) print("hello") return "hello, &#123;&#125;".format(person)p = "world"print(hello(p)) world, 你好 hello hello, world12345678910def hello(person): print("&#123;&#125;, 你好".format(person)) return "提前结束了" print("hello") return "hello, &#123;&#125;".format(person)p = "world"print(hello(p)) world, 你好 提前结束了123# 查找函数帮助文档# 用help函数help(print) Help on built-in function print in module builtins: print(...) print(value, ..., sep=&apos; &apos;, end=&apos;\n&apos;, file=sys.stdout, flush=False) Prints the values to a stream, or to sys.stdout by default. Optional keyword arguments: file: a file-like object (stream); defaults to the current sys.stdout. sep: string inserted between values, default a space. end: string appended after the last value, default a newline. flush: whether to forcibly flush the stream.12345678# 九九乘法表# v1.0for row in range(1, 10): # 打印一行 for col in range(1, row + 1): # print函数默认打印完成后换行 print("&#123;&#125;*&#123;&#125;=&#123;:&lt;2&#125;".format(col, row, col * row), end=" ") print() 1*1=1 1*2=2 2*2=4 1*3=3 2*3=6 3*3=9 1*4=4 2*4=8 3*4=12 4*4=16 1*5=5 2*5=10 3*5=15 4*5=20 5*5=25 1*6=6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=36 1*7=7 2*7=14 3*7=21 4*7=28 5*7=35 6*7=42 7*7=49 1*8=8 2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=64 1*9=9 2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81 1234567891011# 定义一个函数，打印一行九九乘法表def printLine(row): for col in range(1, row + 1): # print函数默认打印完成后换行 print("&#123;&#125;*&#123;&#125;=&#123;:&lt;2&#125;".format(col, row, col * row), end=" ") print() # 九九乘法表# v2.0for row in range(1, 10): printLine(row) 1*1=1 1*2=2 2*2=4 1*3=3 2*3=6 3*3=9 1*4=4 2*4=8 3*4=12 4*4=16 1*5=5 2*5=10 3*5=15 4*5=20 5*5=25 1*6=6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=36 1*7=7 2*7=14 3*7=21 4*7=28 5*7=35 6*7=42 7*7=49 1*8=8 2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=64 1*9=9 2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81 函数参数 参数分类 普通参数 默认参数 关键字参数 收集参数 普通参数 定义的时候直接定义变量名 调用的时候直接把变量或值放入指定位置 def 函数名（参数1， 参数2，....): 函数体 # 调用 函数名（value1, value2,.......) # 调用的时候，具体值参考的是位置，按位置赋值 默认参数 形参带有默认值 调用的时候如果没有对相应形参赋值，则使用默认值 def func_name(p1=v1, p2=v2..........): func_block #调用1 func_name() # 调用2 value1= 100 value2=200 func_name(value1,value2) 12345678# 默认参数示例# 报名函数，需要知道学生性别# 没有特别指定，默认为男def reg(name, age, gender='male'): if gender == 'male': print("&#123;0&#125; is &#123;1&#125;, and he is a good student".format(name, age)) else: print("&#123;0&#125; is &#123;1&#125;, and she is a good student".format(name, age)) 123# 调用默认参数函数示例reg("xiaoming", 21)reg("handuoduo", 20, "female") xiaoming is 21, and he is a good student handuoduo is 20, and she is a good student关键字参数 语法 def func(p1=v1, p2=v2.....): func_body 调用函数： func(p1=value1, p2=value2.......) 比较麻烦，但也有好处 不容易混淆，一般实参和形参只是按照位置一一对应，容易出错 使用关键字参数，可以不考虑参数位置 1234567891011121314151617# 关键字参数示例def stu(name, age, addr): print("I am a student") print("我叫&#123;0&#125;,我今年&#123;1&#125;岁了，我住&#123;2&#125;".format(name, age, addr)) n = '胡图图'a = 5addr = '翻斗大街翻斗花园二号楼1001室'# 普通参数，只按照位置传递，容易出错stu(a, n, addr)def stu_key(name="None", age=0, addr="None"): print("I am a student") print("我叫&#123;0&#125;,我今年&#123;1&#125;岁了，我住&#123;2&#125;".format(name, age, addr)) stu_key(age=a, name=n, addr=addr) I am a student 我叫5,我今年胡图图岁了，我住翻斗大街翻斗花园二号楼1001室 I am a student 我叫胡图图,我今年5岁了，我住翻斗大街翻斗花园二号楼1001室收集参数 把没有位置，不能和定义时的参数位置对应的参数放入一个特定的数据结构中 语法： def func(*args): func_body 按照list使用方式访问args得到传入的参数 调用： func(p1, p2, p3, .....) 参数名args不是必须这么写，但是推荐使用args 参数名args前需要有星号（*） 收集参数可以和其它参数共存 1234567891011121314# 收集参数代码# 函数模拟一个学生进行自我介绍，但具体内容不清楚# 把args看做一个listdef stu(*args): print("Hello 大家好，我自我介绍一下，简单说两句：") # type函数作用是检测变量类型 print(type(args)) for item in args: print(item) stu("胡图图", "今年5岁了", "翻斗大街翻斗花园二号楼1001室")stu("张小丽")stu("胡英俊") Hello 大家好，我自我介绍一下，简单说两句： &lt;class &apos;tuple&apos;&gt; 胡图图 今年5岁了 翻斗大街翻斗花园二号楼1001室 Hello 大家好，我自我介绍一下，简单说两句： &lt;class &apos;tuple&apos;&gt; 张小丽 Hello 大家好，我自我介绍一下，简单说两句： &lt;class &apos;tuple&apos;&gt; 胡英俊123# 收集参数示例# 说明收集参数可以不带任何实参调用，此时收集参数为空tuplestu() Hello 大家好，我自我介绍一下，简单说两句： &lt;class &apos;tuple&apos;&gt;收集关键字参数 把关键字参数安字典格式存入收集参数 语法： def func( **kwargs): func_body # 调用： func(p1=v1, p2=v2, p3=v3........) 推荐使用kwargs 调用的时候，把多余的关键字参数放入kwargs 访问kwargs需要按字典格式访问 123456789101112131415# 收集参数示例# 自我介绍，调用的时候需要使用关键字参数调用def stu(**kwargs): # 在函数同内对于kwargs的使用不带星号（**） print("Hello 大家好，我先自我介绍一下：") print(type(kwargs)) # 对于字典的访问，python2和python3有区别 for k, v in kwargs.items(): print(k, '----', v) stu(name='胡图图', gae=5, addr='翻斗大街翻斗花园二号楼1001室')print('*' * 30)stu(name='胡英俊') Hello 大家好，我先自我介绍一下： &lt;class &apos;dict&apos;&gt; name ---- 胡图图 gae ---- 5 addr ---- 翻斗大街翻斗花园二号楼1001室 ****************************** Hello 大家好，我先自我介绍一下： &lt;class &apos;dict&apos;&gt; name ---- 胡英俊12# 收集参数可以为空stu() Hello 大家好，我先自我介绍一下： &lt;class &apos;dict&apos;&gt;收集参数混合调用的顺序问题 收集参数，关键字参数，普通参数可以混合使用 使用规则，普通参数和关键字参数优先 定义的时候一般找普通参数，关键字参数，收集参数tuple，收集参数dict 12345678910111213141516171819202122232425# 收集参数混合调用示例# stu模拟一个学生的自我介绍def stu(name, age, *args, hobby='没有', **kwargs): print("Hello 大家好") print("我叫&#123;0&#125;,我今年&#123;1&#125;岁。".format(name, age)) if hobby == '没有': print("我没有爱好") else: print("我的爱好是&#123;&#125;".format(hobby)) print('*' * 30) for i in args: print(i) print('*' * 30) for k, v in kwargs.items(): print(k, '---', v) name = '胡图图'age = 5stu(name, age)stu(name, age, hobby='吃') Hello 大家好 我叫胡图图,我今年5岁。 我没有爱好 ****************************** ****************************** Hello 大家好 我叫胡图图,我今年5岁。 我的爱好是吃 ****************************** ******************************收集参数的解包 把参数放入列表或者字典中，直接把list/dict中的值放入收集参数中 12345678910111213141516171819202122# 收集参数的解包def stu(*args): print('哈哈哈哈哈') # n用来表示循环次数 # 主要用来调试 n = 0 for i in args: print(type(i)) print(n) n += 1 print(i) #stu("hututu", "zhangxiaoli", "huyingjun", 5)l = ["hututu", "zhangxiaoli", "huyingjun"]stu(l)print('*' * 30)stu(*l) 哈哈哈哈哈 &lt;class &apos;list&apos;&gt; 0 [&apos;hututu&apos;, &apos;zhangxiaoli&apos;, &apos;huyingjun&apos;] ****************************** 哈哈哈哈哈 &lt;class &apos;str&apos;&gt; 0 hututu &lt;class &apos;str&apos;&gt; 1 zhangxiaoli &lt;class &apos;str&apos;&gt; 2 huyingjun 同理，dict类型收集参数一样可以解包，对dict类型进行解包需要用两个星号（**） 返回值 函数和过程的区别 -有无返回值 需要用return显示放回内容 如果没有返回，则默认返回None 推荐写法，无论有无返回值，最后都要以return结束 1234567891011121314# 返回值示例def func_1(): print("有返回值") return 1def func_2(): print("没有返回值") f1 = func_1()print(f1)f2 = func_2()print(f2) 有返回值 1 没有返回值 None函数文档 函数文档的作用是对当前函数提供相关使用的参考信息 文档的写法： 在函数内部开始的第一行使用三引号字符串定义 文档的查看 使用help函数，例如help(print) 使用doc查看 1234567# 文档示例# 函数stu是模拟学生的自我介绍的内容def stu(name, age, *args): ''' 这是文档说明 这是文档说明 ''' 12# 查看函数文档help(stu) Help on function stu in module __main__: stu(name, age, *args) 这是文档说明 这是文档说明1stu.__doc__ &apos;\n 这是文档说明\n 这是文档说明\n &apos;123456789101112131415def stu(name, age): ''' 这是文档的文字内容 :param name: 表示学生的姓名 :param age: 表示学生的年龄 :return: 此函数没有返回值 ''' passprint(help(stu))print("*" * 20)print(stu.__doc__) Help on function stu in module __main__: stu(name, age) 这是文档的文字内容 :param name: 表示学生的姓名 :param age: 表示学生的年龄 :return: 此函数没有返回值 None ******************** 这是文档的文字内容 :param name: 表示学生的姓名 :param age: 表示学生的年龄 :return: 此函数没有返回值变量作用域 变量有作用范围的限制 分类：按照作用域分类 全局（global）：在函数外部定义 局部（local）：在函数内部定义 变量的作用范围： 全局变量：在整个全局范围都有效 全局变量在局部可以使用（即函数内部可以访问函数外部定义的变量） 局部变量在局部范围可以使用 局部变量在全局范围无法使用 LEGB原则 L（Local）局部作用域 E（Enclosing function locale）外部嵌套函数作用域 G（Global module）函数定义所在模块作用域 B（Buildin）python内置模块的作用域 12345678910111213# 认为a1是全局的a1 = 100def fun(): print(a1) print("I am in fun") # a2的作用范围是fun a2 = 99 print(a2) print(a1)fun()print(a2) 100 100 I am in fun 99 --------------------------------------------------------------------------- NameError Traceback (most recent call last) &lt;ipython-input-25-686ce1e099ee&gt; in &lt;module&gt;() 11 print(a1) 12 fun() ---&gt; 13 print(a2) NameError: name &apos;a2&apos; is not defined把局部变量变为全局变量 使用global 12345678910111213def fun(): global b1 b1 = 100 print(b1) print("I am in fun") b2 = 99 print(b2)# print(b1)# errorfun()print(b1) 100 I am in fun 99 100globals， locals函数 可以通过globals和locals显示出局部变量和全局变量 12345678910# globals和locals是内建函数a = 1b = 2def fun(c, d): e = 111 print("Locals=&#123;0&#125;".format(locals())) print("Globals=&#123;0&#125;".format(globals())) fun(100, 200) eval()函数 把一个字符串当成一个表达式来执行，放回表达式执行后的结果 语法：eval(string_code, globals=None, locals=None) 12345678910# eval()示例x = 100 y = 200# 执行x + y# z = x + yz1 = x + yz2 = eval("x+y")print(z1)print(z2) 300 300exec()函数 跟eval()功能类似，但是不返回结果 语法：exec(string_code, globals=None, locals=None) 1234567891011# exec()示例x = 100 y = 200# 执行x + y# z = x + yz1 = x + y# 注意字符串中引号，比对exec()执行结果和代码执行结果z2 = exec("print('x+y:', x+y)")print(z1)print(z2) x+y: 300 300 None递归函数 函数直接或间接调用自身 优点：简洁，容易理解 缺点：对递归深度有限制，消耗资源大 python对递归深度有限制，超过会报错 在写递归程序的时候，一定要注意结束条件 123456789101112# 递归调用深度限制代码x = 0def fun(): global x x += 1 print(x) # 递归，调用自己 fun() fun() 123456789101112131415161718192021# 斐波那契数列# 一列数字，第一个值是1， 第二个也是1， 从第三个开始，每一个数字的值等于前两个数字出现的值的和# 数学公式为： f(1) = 1, f(2) = 1, f(n) = f(n-1) + f(n-2)# 例如： 1,1，2，3,5,8,13...# n表示求第n个数子的斐波那契数列的值def fib(n): if n &lt;= 0: return 'error' if n == 1: return 1 if n == 2: return 1 return fib(n-1) + fib(n-2)print(fib(-5))print(fib(10)) error 55]]></content>
  </entry>
  <entry>
    <title><![CDATA[程序结构]]></title>
    <url>%2F2019%2F10%2F11%2F%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[程序结构 顺序 分支 循环 分支 分支的基本语法if 条件表达式： 语句1 语句2 语句3 ...... 条件表达式就是计算结果必须为布尔值的表达式 表达式后面的冒号不能少 注意if后面出现的语句，如果属于if语句块，则必须同一个缩进 条件表达式结果为True执行if后面的缩进语句块 12345# 如果age小于18岁，则未成年age = 17if age &lt; 18: print("未成年") 未成年双向分支 if…else…语句 if 条件表达式: 语句1 语句2 ... else: 语句1 语句2 ..... 双向分支有两个分支，当程序执行到if…else…语句的时候，一定会执行if或else中的一个，也仅执行一个 缩进问题，if和else一个层级，其余语句一个层级 12345678910111213# input的作用是# 1. 在屏幕上输出的括号内的字符串# 2. 接受用户输入的内容并返回到程序# 3. input返回的内容一定是字符串类型gender = input("请输入性别：")print("你输入的性别是：&#123;0&#125;".format(gender))if gender == "男": print("hello man")else: print("hello woman") print("嘿嘿嘿") 请输入性别：男 你输入的性别是：男 hello man 嘿嘿嘿1234567891011121314151617181920# 考试成绩判断# 90以上A# 80-90：B# 70-80：C# 60-70：D# 60以下：E# score 存放学生的成绩，注意input的返回类型，需要把str转换成intscore = int(input("请输入学生的成绩："))if score &gt;= 90: print("A")if score &gt;= 80 and score &lt; 90: print("B")if score &gt;= 70 and score &lt; 80: print("C")if score &gt;= 60 and score &lt; 70: print("D")if score &lt; 60: print("E") 请输入学生的成绩：90 A多路分支 很多分支的情况，简称多路分支 if 条件表达式： 语句1 .... elif 条件表达式： 语句1 ... elif 条件表达式： 语句1 ... else: 语句1 .... elif可以有很多个 else可选 多路分支只会选一个执行 123456789101112score = int(input("请输入学生成绩"))if score &gt;= 90: print("A")elif score &gt;= 80: print("B")elif score &gt;= 70: print("C")elif score &gt;= 60: print("D")else: print("E") 请输入学生成绩90 Aif语句其它 if语句可以嵌套使用，但不推荐 python没有switch-case语句 循环 重复执行某些固定动作或处理基本固定的事务 分类 for循环 while循环 for循环 for循环 for 变量 in 序列： 语句1 语句2 ... 123456# 列表就是一列数字或者其它值，一般用中括号表示# 例如 ['hello', 'world', 'hahaha']# 打印学生列表姓名for name in ['zhangsan', 'lisi', 'wangwu']: print(name) zhangsan lisi wangwu123456789# 打印学生列表姓名# 找到鸽子for name in ['复读机', '嘤嘤嘤', '柠檬', '鸽子']: print(name) if name == '鸽子': print("就是你了") else: print("不是") 复读机 不是 嘤嘤嘤 不是 柠檬 不是 鸽子 就是你了range介绍 生成一个数字序列 具体范围可以设定 1234567# range练习# 打印从1-10的数字# 注意，一般在python中，如果表示数字范围的两个数，一般是包含左边数字不包含右边数字# randint是特例，左右都包含# range函数在python2和python3中有区别for i in range(1, 11): print(i) 1 2 3 4 5 6 7 8 9 10for-else语句 当for循环结束的时候，会执行else语句 else语句是可选语句 12345678for name in ['复读机', '嘤嘤嘤', '柠檬', '鸽子']: print(name) if name == '鸽子': print("就是你了") else: print("不是")else: print("嘿嘿嘿嘿嘿") 复读机 不是 嘤嘤嘤 不是 柠檬 不是 鸽子 就是你了 嘿嘿嘿嘿嘿break，continue， pass break：无条件结束整个循环 continue： 无条件结束本次循环，从新进入下一轮循环 pass：表示略过，通常用于占位 12345678# 在数字1-10中，寻找数字7，找到以后打印出来，其余什么都不做# for循环中的变量表示，一般用i， k， m， n， 或者index， idx， item之类# 在python中，如果循环变量名称不重要，可以用下划线（_）代替for i in range(1, 11): if i == 7: print(i) break 712345678# continue语句练习# 在数字1-10中，寻找所有偶数，找到偶数后打印偶数for i in range(1, 11): if i % 2 == 1: continue else: print("&#123;&#125;是偶数".format(i)) 2是偶数 4是偶数 6是偶数 8是偶数 10是偶数123for i in range(1, 11): if i % 2 == 0: print("&#123;&#125;是偶数".format(i)) 2是偶数 4是偶数 6是偶数 8是偶数 10是偶数12345for i in range(1, 11): if i % 2 == 1: continue print("&#123;&#125;是偶数".format(i)) 2是偶数 4是偶数 6是偶数 8是偶数 10是偶数123456# pass例子，一般用于占位# pass没有跳过功能for i in range(1, 11): pass print("嘿嘿嘿") 嘿嘿嘿 嘿嘿嘿 嘿嘿嘿 嘿嘿嘿 嘿嘿嘿 嘿嘿嘿 嘿嘿嘿 嘿嘿嘿 嘿嘿嘿 嘿嘿嘿while循环 一个循环语句 表示当某条件成立的时候，就循环 不知道具体循环次数，但能确定循环成立条件的时候用while循环 while语法： while 条件表达式： 语句块 #另外一种表达方法 while 条件表达式： 语句块1 else： 语句块2 12345678# 如果年利率是6.7%，本利是每年翻滚，则多少年后本钱会翻倍benqian = 100000year = 0;while benqian &lt; 200000: benqian = benqian * (1 + 0.067) year += 1 print("第&#123;&#125;年拿了&#123;&#125;钱".format(year, benqian)) 第1年拿了106700.0钱 第2年拿了113848.9钱 第3年拿了121476.77629999998钱 第4年拿了129615.72031209998钱 第5年拿了138299.97357301068钱 第6年拿了147566.07180240238钱 第7年拿了157452.99861316333钱 第8年拿了168002.34952024528钱 第9年拿了179258.5069381017钱 第10年拿了191268.8269029545钱 第11年拿了204083.83830545243钱1234567891011# 如果年利率是6.7%，本利是每年翻滚，则多少年后本钱会翻倍# 然后庆祝一下benqian = 100000year = 0;while benqian &lt; 200000: benqian = benqian * (1 + 0.067) year += 1 print("第&#123;&#125;年拿了&#123;&#125;钱".format(year, benqian))else: print("呵") 第1年拿了106700.0钱 第2年拿了113848.9钱 第3年拿了121476.77629999998钱 第4年拿了129615.72031209998钱 第5年拿了138299.97357301068钱 第6年拿了147566.07180240238钱 第7年拿了157452.99861316333钱 第8年拿了168002.34952024528钱 第9年拿了179258.5069381017钱 第10年拿了191268.8269029545钱 第11年拿了204083.83830545243钱 呵12]]></content>
  </entry>
  <entry>
    <title><![CDATA[运算符]]></title>
    <url>%2F2019%2F10%2F10%2F%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[运算符 由一个以上的值经过变化得到新值的过程就叫运算 用于运算的符号叫运算符 运算符分类 算数运算符 比较或关系运算符 赋值运算符 逻辑运算符 位运算符 成员运算符 身份运算符 算数运算符 进行算数运算的符号 python没有自增自减运算符 1234567891011121314151617181920212223242526# +，-跟正常算术运算符一模一样a = 9 + 3 - 2print(a)# 乘号用星号（*）代替a = 9 * 3print(a)# 除号用反斜杠（/）代替# 在python2.x 和python3.x中，除号（/）结果可能不一致a = 9 / 4print(a)# %取余运算# 两个数字相除有商和余数# % 只会得到余数a = 9 % 2print(a)# //表示取商运算，也叫地板除a = 9 // 5print(a)# **表示幂运算a = 3 ** 3print(a) 10 27 2.25 1 1 27比较运算符 对两个变量或值进行比较的运算符 比较的结果是布尔值，即True/False 123456789101112131415# == 等于号a = 3 ** 4# 下面语句执行顺序是# 1. 计算 a == 80# 2. 把结果放入b中b = a == 80print(b)# != 不等于print(9 != 8)# &gt; 大于# &lt; 小于# &gt;= 大于等于# &lt;= 小于等于 False True赋值运算符1234567891011# = 赋值a = 0c = a = 5# +=,是缩写a = 0a += 7 # a = a + 7的缩写print(a)# 所有数学运算符都有缩写形式# -=, *=, /=, //=, %=, **=, 都是缩写形式 7逻辑运算符 对布尔值进行计算的符号 and 逻辑与 or 逻辑或 not 逻辑非 python中逻辑运算没有异或运算 运算规则： and看做乘法，or看做加法 True看做1， False看做0 则逻辑运算就能转换成整数数学运算 最后结果如果是0则为False， 否则为True 逻辑运算的短路问题 逻辑运算式，按照运算顺序计算，一旦能够确定整个式子未来的值，则不再进行计算，直接返回 123456789101112# 逻辑运算符案例a = Trueb = Falsec = True# 以下式子等价于 d = 1 * 0 + 1d = a and b or cprint(d)# d = 1 + 0 * 1d = a or b and aprint(d) True True12345678910111213# 逻辑运算的短路案例# 下面的逻辑表达式， a的值一定是True， 则运行到or的时候，整个表达式不在向下计算a = True or ...# 下面表达式，如果xxx中包含赋值表达式，则结果很难预期# 代码示例（伪代码)# b = 0# a = a or (b=9) and 6# 假定上面表达式如果没有语法错误# 则b最终的值应该是0而不是9# print(b)# print(a) 成员运算符 用来检测某一个变量是否是另一个变量的成员 in not in 1234567891011# 案例l = [1, 2, 3, 4, 5]a = 7b = a in lprint(b)a = 3print(a in l)print(a not in l) False True False身份运算 is：用来检测两个变量是否是同一个变量 语法：var1 is var2 is not： 两个变量不是同一个变量 1234567a = 9b = 9print(a is b)a = "I love you"b = "I love you"print(a is b) True False运算符的优先级问题 永远记住，括号具有最高优先级 优先级：** 指数 (最高优先级) ~ + - 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) * / % // 乘，除，取模和取整除 + - 加法减法 &gt;&gt; &lt;&lt; 右移，左移运算符 &amp; 位 &apos;AND&apos; ^ | 位运算符 &lt;= &lt; &gt; &gt;= 比较运算符 &lt;&gt; == != 等于运算符 = %= /= //= -= += *= **= 赋值运算符 is is not 身份运算符 in not in 成员运算符 not or and 逻辑运算符 12]]></content>
  </entry>
  <entry>
    <title><![CDATA[字符串]]></title>
    <url>%2F2019%2F10%2F10%2F%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[字符串 转义字符 格式化 内建函数 转义字符 用一个特殊的方法表示出一系列不方便写出的内容，比如回车键，换行键，退格键 借助反斜杠字符，一旦字符串中出现反斜杠，则反斜杠后面一个或几个字符表示已经不是原来的意思了，进行转义 在字符串中，一旦出现反斜杠就要加倍小心，可能由转义字符出现 不同系统对换行操作有不同的表示 windows：\n Linux：\r\n 12s = "I love you"print(s) I love you123456789101112131415161718# 如果想表示出Let't go来# 1. 可是使用嵌套引号，即外层使用双引号# 2. 转义字符s = "Let's go"print(s)# \' == 'ss = 'Let\'s go'print(ss)# \\ == \sss = "c:\\user"print(sss)# 回车换行符s1 = "嘿嘿嘿嘿嘿 \r\n哈哈哈哈哈"print(s1) 字符串的格式化 把字符串按照一定格式打印或者填充 格式化有两种方法 利用百分号（%） 利用format函数 利用百分号格式化 在字符串中，利用%表示一个特殊的含义，表示对字符进行格式化 %d：此处应该放入一个整数 %s：表示此处应该放入一个字符串 123s = "I love %s"# 下面打印，直接把%s作为字符串的一个内容打印出来print(s) I love %s1print("I love %s"%"you") I love you1print(s%"you") I love you1234s = "I am %d years old"# 留意下面两句话的区别print(s)print(s%18) I am %d years old I am 18 years old12345678910s = "I am %s, I am %d years old"print(s)# 注意以下表达的出错原因# 如果字符串中由占位符，则由几个占位符必须用几个实际内容代替，或者一个也不要#print(s%"tulingxueyuan")# 如果出现多个占位符，则相应内容需要用括号括起来print(s%("tulingxueyuan", 18)) I am %s, I am %d years old I am tulingxueyuan, I am 18 years oldformat函数格式化字符串 直接用format函数进行格式化 推荐使用这种方法 在使用上，以{}和:代替%号，后面用format带参数完成 12345s = "I love &#123;&#125;".format("you")print(s)s = "Yes, I am &#123;1&#125; years old, I love &#123;0&#125; and I am &#123;1&#125; years old".format("you", 18)print(s) I love you Yes, I am 18 years old, I love you and I am 18 years oldNone 表示什么都没有 如果函数没有返回值，可以返回None 用来占位置 用来接触变量绑定 表达式 由一个或几个数字或变量和运算符组成的一行代码 通常会返回一个结果]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python概述]]></title>
    <url>%2F2019%2F10%2F09%2FPython%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[Python基础Python概述 计算机语言概述 语言：交流工具，沟通媒介 计算机语言：人跟计算机交流的工具，翻译官 Python是计算机语言的一种 Python编程语言 代码：人类语言，通过代码命令机器，跟机器交流 Python解释器：就是那个担任翻译工作的工具 流程： 写代码 执行：由翻译官（Python解释器）把命令（Code）翻译给机器，同时把机器结果翻译给我们 Python读音问题 Python简史 1989年，Guido Van Rossum 2008：Python3.0诞生 2017：AI元年，Python崛起 Python特点 速度问题 Python跟其它语言的选择问题 Python的应用领域 全能 设计哲学：平衡发展，样样通，简洁明了 Python的执行方式 本质上Python是一堆命令的集合 执行过程是逐行执行，遇到问题即刻终止 12# 打印Hello Worldprint("Hello world") Hello world环境安装 推荐Virtualbox + Ubuntu 套件推荐Anaconda + pycharm 如果机器内存大于4G，推荐虚拟机下启动系统 小于4G，推荐用Windows下Anaconda + pycharm 1234567891011# 代码的作用# 1，给人看# 2，给机器看# 注释是纯给人看的内容print("Hello World") # 打印Hello World出来'''这也是注释可以写很多很多''' Hello World &apos;\n这也是注释\n可以写很多\n很多\n&apos;注释 机器不执行注释内容 注释一般用自然语言书写 注释的写法 行注释：以#号开头，可以单独行，也可以在某行代码后面 块注释：好几行代码或者内容，以三个连续单引号或双引号开始和结束，中间任何内容机器都忽略 变量 程序 = 数据结构 + 算法 变量就是可以重复使用的一个量，或者叫一个代号 变量命名规则 变量命名可以包含数字，大小写字母，下划线或者更多，但是不推荐前三种之外的符号 不可以以数字开头 一般在python中，以下划线开头的内容具有特殊含义，不建议使用 大小写不一样，大小写敏感 推荐： 使用具有固定含义的英文单词或者缩写，srv=server skt=socket，一般以posix命名规则为主 驼峰命名法 名称以单词自动连接，且每个单词首字母大写 大驼峰，每个单词第一个字母均大写 在python中给类命名使用此法 MyFirstLove， InOne 小驼峰，类似大驼峰，但第一个字母小写 在python中一般给普通变量或者函数命名 myFirstLove， intOne posix写法 多个单词用下划线连接 单词全部小写 my_first_love, int_one 保留字和关键字 变量命名必须避开，不能跟关键字和保留字重复 class， def， break， for 1234# 查看关键字的方法import keyword # 引入关键字模块# 打印出系统全部关键字print(keyword.kwlist) [&apos;False&apos;, &apos;None&apos;, &apos;True&apos;, &apos;and&apos;, &apos;as&apos;, &apos;assert&apos;, &apos;async&apos;, &apos;await&apos;, &apos;break&apos;, &apos;class&apos;, &apos;continue&apos;, &apos;def&apos;, &apos;del&apos;, &apos;elif&apos;, &apos;else&apos;, &apos;except&apos;, &apos;finally&apos;, &apos;for&apos;, &apos;from&apos;, &apos;global&apos;, &apos;if&apos;, &apos;import&apos;, &apos;in&apos;, &apos;is&apos;, &apos;lambda&apos;, &apos;nonlocal&apos;, &apos;not&apos;, &apos;or&apos;, &apos;pass&apos;, &apos;raise&apos;, &apos;return&apos;, &apos;try&apos;, &apos;while&apos;, &apos;with&apos;, &apos;yield&apos;]变量申明 var_name = var_value var1 = var2 = var3 = var_value var1, var2, var3 = v1, v2, v3 12345678910111213141516# 定义变量age， 把18放入变量age中age = 18;print(age)print(18)# 给age1， age2， age3 放入同样一个内容或值age1 = age2 = age3 = 18print(age1)print(age2)print(age3)# 一行内给多个变量赋值age4, age5, age6 = 12, 21, 45print(age4)print(age5)print(age6) 18 18 18 18 18 12 21 45变量类型 严格意义上讲，python只有一个类型 标准数据一共六种 数字类型Number 字符串类型str 列表list 元组tuple 字典Dictionary 集合set Number数字类型 数字类型没有大小限制 整数 没有小数部分，表示个数的数字 自然数， 0， 负自然数 整数分进制 二进制 计算机常用 是计算机唯一能直接理解的数字 表示为0b开头的0，1代码 例如 0b01101，0b10001 八进制 不常用 以0o开头的包含0-7的数字 十六进制 逢十六进一 其实是每四位二进制表示一位十六进制数 包含0-9，a-f 数字上以0x开头表示 十进制 1234567891011num = 111print(num)num = 0b11010print(num)num = 0o105print(num)num = 0xffprint(num) 111 26 69 255浮点数 小数 计算机里面表示浮点数可以有条件省略 3.1415 3. 0.5 .5 科学计数法 定义跟数学定义一样 写法是用e/E后面跟整数表示10的指数 176.23 == 1.7623e2 0.876 == 8.76e-1 12345height = 156.34print(height)weight = .2print(weight) 156.34 0.2复数complex 定义同数学定义一样 一个由实部和虚部构成的数字 虚部用j/J表示 5+3j 3j (3j) 布尔值 表示真假的值 只有两个值， True/False 布尔值可以跟数字直接操作 1234# 布尔值操作age = 18 + Trueprint(age) 19字符串 用来表示一串文字信息 如何表示 单引号 双引号 三引号（三个单引号或三个双引号） 能够括起多行信息 单双引号交错使用 12345678910111213141516171819love = "I love you"print(love)love = "我爱你"print(love)# 单双引号交错使用的例子# &lt;a style="color:red"&gt;哈哈哈&lt;/a&gt;# 用引号表示上面字符串html = '&lt;a style="color:red"&gt;哈哈哈&lt;/a&gt;'htmls = '''I love you哈哈哈哈哈嘿嘿嘿嘿嘿'''print(html)print(htmls) I love you 我爱你 &lt;a style=&quot;color:red&quot;&gt;哈哈哈&lt;/a&gt; I love you 哈哈哈哈哈 嘿嘿嘿嘿嘿]]></content>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客]]></title>
    <url>%2F2019%2F08%2F06%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hello World!]]></content>
  </entry>
</search>
