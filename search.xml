<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[程序结构]]></title>
    <url>%2F2019%2F10%2F11%2F%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[程序结构 顺序 分支 循环 分支 分支的基本语法if 条件表达式： 语句1 语句2 语句3 ...... 条件表达式就是计算结果必须为布尔值的表达式 表达式后面的冒号不能少 注意if后面出现的语句，如果属于if语句块，则必须同一个缩进 条件表达式结果为True执行if后面的缩进语句块 12345# 如果age小于18岁，则未成年age = 17if age &lt; 18: print("未成年") 未成年双向分支 if…else…语句 if 条件表达式: 语句1 语句2 ... else: 语句1 语句2 ..... 双向分支有两个分支，当程序执行到if…else…语句的时候，一定会执行if或else中的一个，也仅执行一个 缩进问题，if和else一个层级，其余语句一个层级 12345678910111213# input的作用是# 1. 在屏幕上输出的括号内的字符串# 2. 接受用户输入的内容并返回到程序# 3. input返回的内容一定是字符串类型gender = input("请输入性别：")print("你输入的性别是：&#123;0&#125;".format(gender))if gender == "男": print("hello man")else: print("hello woman") print("嘿嘿嘿") 请输入性别：男 你输入的性别是：男 hello man 嘿嘿嘿1234567891011121314151617181920# 考试成绩判断# 90以上A# 80-90：B# 70-80：C# 60-70：D# 60以下：E# score 存放学生的成绩，注意input的返回类型，需要把str转换成intscore = int(input("请输入学生的成绩："))if score &gt;= 90: print("A")if score &gt;= 80 and score &lt; 90: print("B")if score &gt;= 70 and score &lt; 80: print("C")if score &gt;= 60 and score &lt; 70: print("D")if score &lt; 60: print("E") 请输入学生的成绩：90 A多路分支 很多分支的情况，简称多路分支 if 条件表达式： 语句1 .... elif 条件表达式： 语句1 ... elif 条件表达式： 语句1 ... else: 语句1 .... elif可以有很多个 else可选 多路分支只会选一个执行 123456789101112score = int(input("请输入学生成绩"))if score &gt;= 90: print("A")elif score &gt;= 80: print("B")elif score &gt;= 70: print("C")elif score &gt;= 60: print("D")else: print("E") 请输入学生成绩90 Aif语句其它 if语句可以嵌套使用，但不推荐 python没有switch-case语句 循环 重复执行某些固定动作或处理基本固定的事务 分类 for循环 while循环 for循环 for循环 for 变量 in 序列： 语句1 语句2 ... 123456# 列表就是一列数字或者其它值，一般用中括号表示# 例如 ['hello', 'world', 'hahaha']# 打印学生列表姓名for name in ['zhangsan', 'lisi', 'wangwu']: print(name) zhangsan lisi wangwu123456789# 打印学生列表姓名# 找到鸽子for name in ['复读机', '嘤嘤嘤', '柠檬', '鸽子']: print(name) if name == '鸽子': print("就是你了") else: print("不是") 复读机 不是 嘤嘤嘤 不是 柠檬 不是 鸽子 就是你了range介绍 生成一个数字序列 具体范围可以设定 1234567# range练习# 打印从1-10的数字# 注意，一般在python中，如果表示数字范围的两个数，一般是包含左边数字不包含右边数字# randint是特例，左右都包含# range函数在python2和python3中有区别for i in range(1, 11): print(i) 1 2 3 4 5 6 7 8 9 10for-else语句 当for循环结束的时候，会执行else语句 else语句是可选语句 12345678for name in ['复读机', '嘤嘤嘤', '柠檬', '鸽子']: print(name) if name == '鸽子': print("就是你了") else: print("不是")else: print("嘿嘿嘿嘿嘿") 复读机 不是 嘤嘤嘤 不是 柠檬 不是 鸽子 就是你了 嘿嘿嘿嘿嘿break，continue， pass break：无条件结束整个循环 continue： 无条件结束本次循环，从新进入下一轮循环 pass：表示略过，通常用于占位 12345678# 在数字1-10中，寻找数字7，找到以后打印出来，其余什么都不做# for循环中的变量表示，一般用i， k， m， n， 或者index， idx， item之类# 在python中，如果循环变量名称不重要，可以用下划线（_）代替for i in range(1, 11): if i == 7: print(i) break 712345678# continue语句练习# 在数字1-10中，寻找所有偶数，找到偶数后打印偶数for i in range(1, 11): if i % 2 == 1: continue else: print("&#123;&#125;是偶数".format(i)) 2是偶数 4是偶数 6是偶数 8是偶数 10是偶数123for i in range(1, 11): if i % 2 == 0: print("&#123;&#125;是偶数".format(i)) 2是偶数 4是偶数 6是偶数 8是偶数 10是偶数12345for i in range(1, 11): if i % 2 == 1: continue print("&#123;&#125;是偶数".format(i)) 2是偶数 4是偶数 6是偶数 8是偶数 10是偶数123456# pass例子，一般用于占位# pass没有跳过功能for i in range(1, 11): pass print("嘿嘿嘿") 嘿嘿嘿 嘿嘿嘿 嘿嘿嘿 嘿嘿嘿 嘿嘿嘿 嘿嘿嘿 嘿嘿嘿 嘿嘿嘿 嘿嘿嘿 嘿嘿嘿while循环 一个循环语句 表示当某条件成立的时候，就循环 不知道具体循环次数，但能确定循环成立条件的时候用while循环 while语法： while 条件表达式： 语句块 #另外一种表达方法 while 条件表达式： 语句块1 else： 语句块2 12345678# 如果年利率是6.7%，本利是每年翻滚，则多少年后本钱会翻倍benqian = 100000year = 0;while benqian &lt; 200000: benqian = benqian * (1 + 0.067) year += 1 print("第&#123;&#125;年拿了&#123;&#125;钱".format(year, benqian)) 第1年拿了106700.0钱 第2年拿了113848.9钱 第3年拿了121476.77629999998钱 第4年拿了129615.72031209998钱 第5年拿了138299.97357301068钱 第6年拿了147566.07180240238钱 第7年拿了157452.99861316333钱 第8年拿了168002.34952024528钱 第9年拿了179258.5069381017钱 第10年拿了191268.8269029545钱 第11年拿了204083.83830545243钱1234567891011# 如果年利率是6.7%，本利是每年翻滚，则多少年后本钱会翻倍# 然后庆祝一下benqian = 100000year = 0;while benqian &lt; 200000: benqian = benqian * (1 + 0.067) year += 1 print("第&#123;&#125;年拿了&#123;&#125;钱".format(year, benqian))else: print("呵") 第1年拿了106700.0钱 第2年拿了113848.9钱 第3年拿了121476.77629999998钱 第4年拿了129615.72031209998钱 第5年拿了138299.97357301068钱 第6年拿了147566.07180240238钱 第7年拿了157452.99861316333钱 第8年拿了168002.34952024528钱 第9年拿了179258.5069381017钱 第10年拿了191268.8269029545钱 第11年拿了204083.83830545243钱 呵12]]></content>
  </entry>
  <entry>
    <title><![CDATA[运算符]]></title>
    <url>%2F2019%2F10%2F10%2F%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[运算符 由一个以上的值经过变化得到新值的过程就叫运算 用于运算的符号叫运算符 运算符分类 算数运算符 比较或关系运算符 赋值运算符 逻辑运算符 位运算符 成员运算符 身份运算符 算数运算符 进行算数运算的符号 python没有自增自减运算符 1234567891011121314151617181920212223242526# +，-跟正常算术运算符一模一样a = 9 + 3 - 2print(a)# 乘号用星号（*）代替a = 9 * 3print(a)# 除号用反斜杠（/）代替# 在python2.x 和python3.x中，除号（/）结果可能不一致a = 9 / 4print(a)# %取余运算# 两个数字相除有商和余数# % 只会得到余数a = 9 % 2print(a)# //表示取商运算，也叫地板除a = 9 // 5print(a)# **表示幂运算a = 3 ** 3print(a) 10 27 2.25 1 1 27比较运算符 对两个变量或值进行比较的运算符 比较的结果是布尔值，即True/False 123456789101112131415# == 等于号a = 3 ** 4# 下面语句执行顺序是# 1. 计算 a == 80# 2. 把结果放入b中b = a == 80print(b)# != 不等于print(9 != 8)# &gt; 大于# &lt; 小于# &gt;= 大于等于# &lt;= 小于等于 False True赋值运算符1234567891011# = 赋值a = 0c = a = 5# +=,是缩写a = 0a += 7 # a = a + 7的缩写print(a)# 所有数学运算符都有缩写形式# -=, *=, /=, //=, %=, **=, 都是缩写形式 7逻辑运算符 对布尔值进行计算的符号 and 逻辑与 or 逻辑或 not 逻辑非 python中逻辑运算没有异或运算 运算规则： and看做乘法，or看做加法 True看做1， False看做0 则逻辑运算就能转换成整数数学运算 最后结果如果是0则为False， 否则为True 逻辑运算的短路问题 逻辑运算式，按照运算顺序计算，一旦能够确定整个式子未来的值，则不再进行计算，直接返回 123456789101112# 逻辑运算符案例a = Trueb = Falsec = True# 以下式子等价于 d = 1 * 0 + 1d = a and b or cprint(d)# d = 1 + 0 * 1d = a or b and aprint(d) True True12345678910111213# 逻辑运算的短路案例# 下面的逻辑表达式， a的值一定是True， 则运行到or的时候，整个表达式不在向下计算a = True or ...# 下面表达式，如果xxx中包含赋值表达式，则结果很难预期# 代码示例（伪代码)# b = 0# a = a or (b=9) and 6# 假定上面表达式如果没有语法错误# 则b最终的值应该是0而不是9# print(b)# print(a) 成员运算符 用来检测某一个变量是否是另一个变量的成员 in not in 1234567891011# 案例l = [1, 2, 3, 4, 5]a = 7b = a in lprint(b)a = 3print(a in l)print(a not in l) False True False身份运算 is：用来检测两个变量是否是同一个变量 语法：var1 is var2 is not： 两个变量不是同一个变量 1234567a = 9b = 9print(a is b)a = "I love you"b = "I love you"print(a is b) True False运算符的优先级问题 永远记住，括号具有最高优先级 优先级：** 指数 (最高优先级) ~ + - 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) * / % // 乘，除，取模和取整除 + - 加法减法 &gt;&gt; &lt;&lt; 右移，左移运算符 &amp; 位 &apos;AND&apos; ^ | 位运算符 &lt;= &lt; &gt; &gt;= 比较运算符 &lt;&gt; == != 等于运算符 = %= /= //= -= += *= **= 赋值运算符 is is not 身份运算符 in not in 成员运算符 not or and 逻辑运算符 12]]></content>
  </entry>
  <entry>
    <title><![CDATA[字符串]]></title>
    <url>%2F2019%2F10%2F10%2F%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[字符串 转义字符 格式化 内建函数 转义字符 用一个特殊的方法表示出一系列不方便写出的内容，比如回车键，换行键，退格键 借助反斜杠字符，一旦字符串中出现反斜杠，则反斜杠后面一个或几个字符表示已经不是原来的意思了，进行转义 在字符串中，一旦出现反斜杠就要加倍小心，可能由转义字符出现 不同系统对换行操作有不同的表示 windows：\n Linux：\r\n 12s = "I love you"print(s) I love you123456789101112131415161718# 如果想表示出Let't go来# 1. 可是使用嵌套引号，即外层使用双引号# 2. 转义字符s = "Let's go"print(s)# \' == 'ss = 'Let\'s go'print(ss)# \\ == \sss = "c:\\user"print(sss)# 回车换行符s1 = "嘿嘿嘿嘿嘿 \r\n哈哈哈哈哈"print(s1) 字符串的格式化 把字符串按照一定格式打印或者填充 格式化有两种方法 利用百分号（%） 利用format函数 利用百分号格式化 在字符串中，利用%表示一个特殊的含义，表示对字符进行格式化 %d：此处应该放入一个整数 %s：表示此处应该放入一个字符串 123s = "I love %s"# 下面打印，直接把%s作为字符串的一个内容打印出来print(s) I love %s1print("I love %s"%"you") I love you1print(s%"you") I love you1234s = "I am %d years old"# 留意下面两句话的区别print(s)print(s%18) I am %d years old I am 18 years old12345678910s = "I am %s, I am %d years old"print(s)# 注意以下表达的出错原因# 如果字符串中由占位符，则由几个占位符必须用几个实际内容代替，或者一个也不要#print(s%"tulingxueyuan")# 如果出现多个占位符，则相应内容需要用括号括起来print(s%("tulingxueyuan", 18)) I am %s, I am %d years old I am tulingxueyuan, I am 18 years oldformat函数格式化字符串 直接用format函数进行格式化 推荐使用这种方法 在使用上，以{}和:代替%号，后面用format带参数完成 12345s = "I love &#123;&#125;".format("you")print(s)s = "Yes, I am &#123;1&#125; years old, I love &#123;0&#125; and I am &#123;1&#125; years old".format("you", 18)print(s) I love you Yes, I am 18 years old, I love you and I am 18 years oldNone 表示什么都没有 如果函数没有返回值，可以返回None 用来占位置 用来接触变量绑定 表达式 由一个或几个数字或变量和运算符组成的一行代码 通常会返回一个结果]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python概述]]></title>
    <url>%2F2019%2F10%2F09%2FPython%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[Python基础Python概述 计算机语言概述 语言：交流工具，沟通媒介 计算机语言：人跟计算机交流的工具，翻译官 Python是计算机语言的一种 Python编程语言 代码：人类语言，通过代码命令机器，跟机器交流 Python解释器：就是那个担任翻译工作的工具 流程： 写代码 执行：由翻译官（Python解释器）把命令（Code）翻译给机器，同时把机器结果翻译给我们 Python读音问题 Python简史 1989年，Guido Van Rossum 2008：Python3.0诞生 2017：AI元年，Python崛起 Python特点 速度问题 Python跟其它语言的选择问题 Python的应用领域 全能 设计哲学：平衡发展，样样通，简洁明了 Python的执行方式 本质上Python是一堆命令的集合 执行过程是逐行执行，遇到问题即刻终止 12# 打印Hello Worldprint("Hello world") Hello world环境安装 推荐Virtualbox + Ubuntu 套件推荐Anaconda + pycharm 如果机器内存大于4G，推荐虚拟机下启动系统 小于4G，推荐用Windows下Anaconda + pycharm 1234567891011# 代码的作用# 1，给人看# 2，给机器看# 注释是纯给人看的内容print("Hello World") # 打印Hello World出来'''这也是注释可以写很多很多''' Hello World &apos;\n这也是注释\n可以写很多\n很多\n&apos;注释 机器不执行注释内容 注释一般用自然语言书写 注释的写法 行注释：以#号开头，可以单独行，也可以在某行代码后面 块注释：好几行代码或者内容，以三个连续单引号或双引号开始和结束，中间任何内容机器都忽略 变量 程序 = 数据结构 + 算法 变量就是可以重复使用的一个量，或者叫一个代号 变量命名规则 变量命名可以包含数字，大小写字母，下划线或者更多，但是不推荐前三种之外的符号 不可以以数字开头 一般在python中，以下划线开头的内容具有特殊含义，不建议使用 大小写不一样，大小写敏感 推荐： 使用具有固定含义的英文单词或者缩写，srv=server skt=socket，一般以posix命名规则为主 驼峰命名法 名称以单词自动连接，且每个单词首字母大写 大驼峰，每个单词第一个字母均大写 在python中给类命名使用此法 MyFirstLove， InOne 小驼峰，类似大驼峰，但第一个字母小写 在python中一般给普通变量或者函数命名 myFirstLove， intOne posix写法 多个单词用下划线连接 单词全部小写 my_first_love, int_one 保留字和关键字 变量命名必须避开，不能跟关键字和保留字重复 class， def， break， for 1234# 查看关键字的方法import keyword # 引入关键字模块# 打印出系统全部关键字print(keyword.kwlist) [&apos;False&apos;, &apos;None&apos;, &apos;True&apos;, &apos;and&apos;, &apos;as&apos;, &apos;assert&apos;, &apos;async&apos;, &apos;await&apos;, &apos;break&apos;, &apos;class&apos;, &apos;continue&apos;, &apos;def&apos;, &apos;del&apos;, &apos;elif&apos;, &apos;else&apos;, &apos;except&apos;, &apos;finally&apos;, &apos;for&apos;, &apos;from&apos;, &apos;global&apos;, &apos;if&apos;, &apos;import&apos;, &apos;in&apos;, &apos;is&apos;, &apos;lambda&apos;, &apos;nonlocal&apos;, &apos;not&apos;, &apos;or&apos;, &apos;pass&apos;, &apos;raise&apos;, &apos;return&apos;, &apos;try&apos;, &apos;while&apos;, &apos;with&apos;, &apos;yield&apos;]变量申明 var_name = var_value var1 = var2 = var3 = var_value var1, var2, var3 = v1, v2, v3 12345678910111213141516# 定义变量age， 把18放入变量age中age = 18;print(age)print(18)# 给age1， age2， age3 放入同样一个内容或值age1 = age2 = age3 = 18print(age1)print(age2)print(age3)# 一行内给多个变量赋值age4, age5, age6 = 12, 21, 45print(age4)print(age5)print(age6) 18 18 18 18 18 12 21 45变量类型 严格意义上讲，python只有一个类型 标准数据一共六种 数字类型Number 字符串类型str 列表list 元组tuple 字典Dictionary 集合set Number数字类型 数字类型没有大小限制 整数 没有小数部分，表示个数的数字 自然数， 0， 负自然数 整数分进制 二进制 计算机常用 是计算机唯一能直接理解的数字 表示为0b开头的0，1代码 例如 0b01101，0b10001 八进制 不常用 以0o开头的包含0-7的数字 十六进制 逢十六进一 其实是每四位二进制表示一位十六进制数 包含0-9，a-f 数字上以0x开头表示 十进制 1234567891011num = 111print(num)num = 0b11010print(num)num = 0o105print(num)num = 0xffprint(num) 111 26 69 255浮点数 小数 计算机里面表示浮点数可以有条件省略 3.1415 3. 0.5 .5 科学计数法 定义跟数学定义一样 写法是用e/E后面跟整数表示10的指数 176.23 == 1.7623e2 0.876 == 8.76e-1 12345height = 156.34print(height)weight = .2print(weight) 156.34 0.2复数complex 定义同数学定义一样 一个由实部和虚部构成的数字 虚部用j/J表示 5+3j 3j (3j) 布尔值 表示真假的值 只有两个值， True/False 布尔值可以跟数字直接操作 1234# 布尔值操作age = 18 + Trueprint(age) 19字符串 用来表示一串文字信息 如何表示 单引号 双引号 三引号（三个单引号或三个双引号） 能够括起多行信息 单双引号交错使用 12345678910111213141516171819love = "I love you"print(love)love = "我爱你"print(love)# 单双引号交错使用的例子# &lt;a style="color:red"&gt;哈哈哈&lt;/a&gt;# 用引号表示上面字符串html = '&lt;a style="color:red"&gt;哈哈哈&lt;/a&gt;'htmls = '''I love you哈哈哈哈哈嘿嘿嘿嘿嘿'''print(html)print(htmls) I love you 我爱你 &lt;a style=&quot;color:red&quot;&gt;哈哈哈&lt;/a&gt; I love you 哈哈哈哈哈 嘿嘿嘿嘿嘿]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F10%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客]]></title>
    <url>%2F2019%2F08%2F06%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hello World!]]></content>
  </entry>
</search>
